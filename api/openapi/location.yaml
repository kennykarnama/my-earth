openapi: "3.0.0"
info:
  version: 1.0.0
  title: My Earth
  license:
    name: MIT
servers:
  - url: http://localhost:8080
paths:
  /locations:
   post:
     summary: Create a new location
     operationId: createLocation
     tags:
       - createLocation
     requestBody:
       content:
         application/json:
          schema:
           $ref: '#/components/schemas/CreateLocationRequest'
     responses:
       '201':
        description: Location successfully created
        content:
          application/json:
           schema:
            $ref: '#/components/schemas/CreateLocationResponse'
       default:
        description: unexpected errors
        content:
          application/json:
           schema:
            $ref: '#/components/schemas/ErrorResponse'
   get:
    summary: list locations
    operationId: list locations. Either provide id or name
    tags:
      - listLocations
    parameters:
      - in: query
        name: id
        description: id of the location
        schema: 
         type: integer
         format: int32
      - in: query
        name: city
        description: name of the city
        schema:
         type: string
    responses:
      '200':
       description: list of locations
       content:
         application/json:
          schema:
           $ref: '#/components/schemas/ListLocations'
      default:
       description: when something goes wrong
       content:
         application/json:
          schema:
           $ref: '#/components/schemas/ErrorResponse'
  /locations/coordinates:
   get:
    summary: Find location coordinates
    parameters:
      - in: query
        schema:
         type: string
        required: true
        name: label
        description: find by labels. Depends on the implementation
    responses: 
     '200':
      description: matches items
      content:
        application/json:
         schema:
          $ref: '#/components/schemas/FindLocationsCoordinates'
     default:
      description: error happens
      content:
        application/json:
         schema:
          $ref: '#/components/schemas/ErrorResponse'
  /locations/weathers:
   post:
     summary: Update location weathers
     operationId: updateLocationWeather
     tags:
       - updateLocationWeather
     requestBody:
       content:
         application/json: {}
     responses:
       '200':
        description: Location weather updated
        content:
          application/json: 
           schema:
            $ref: '#/components/schemas/UpdateLocationWeatherResponse'
       default:
        description: unexpected error response
        content:
          application/json:
           schema:
            $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
   Location:
    type: object
    properties:
      ID:
       type: integer
       format: int32
       description: ID of location
      city:
       type: string
       description: location name
      latitude:
       type: number
       format: double
       description: latitude of the location
      longitude: 
       type: number
       format: double
       description: longitude of the location
      weather_summary:
       type: string
       description: weather summary
      temperature:
       type: number
       format: float
       description: temperatur of the location
      wind_speed:
       type: number
       format: float
       description: speed of wind in the location
      wind_angle:
       type: number
       format: float
       description: angle of wind
      wind_direction:
       type: string
       description: direction of wind
      ref_id:
       type: string
       description: original reference id if any
   FindLocationsCoordinates:
    type: object
    properties:
      items:
       type: array
       items:
        $ref: '#/components/schemas/Location'
   CreateLocationRequest:
    type: object
    required:
      - name
      - latitude
      - longitude
    properties:
      name:
       type: string
       description: location name
      latitude:
       type: number
       format: double
       description: latitude of the location
      longitude:
       type: number
       format: double
       description: longitude of the location
   CreateLocationResponse:
    type: object
    properties:
      status:
       type: string
       description: status of location creation
      message:
       type: string
       description: message of this operation
      data:
        $ref: '#/components/schemas/Location'
   UpdateLocationWeatherResponse:
    type: object
    properties:
      status:
       type: string
       description: status of location creation
      message:
       type: string
       description: message of this operation
      data:
        type: object
        properties:
          numUpdated:
           type: integer
           default: 0
   ListLocations:
    type: object
    properties:
      items:
       type: array
       items:
        $ref: '#/components/schemas/Location'
   ErrorResponse:
    type: object
    properties:
      httpCode:
       type: integer
       description: http status error code
      errorCode:
       type: string
       description: error code
      errorMessage:
       type: string
       description: error message
  

   
   