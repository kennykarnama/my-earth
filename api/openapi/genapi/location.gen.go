// Package genapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package genapi

import (
	"github.com/gin-gonic/gin"
)

// CreateLocationRequest defines model for CreateLocationRequest.
type CreateLocationRequest struct {
	// Latitude latitude of the location
	Latitude *float64 `json:"latitude,omitempty"`

	// Longitude longitude of the location
	Longitude *float64 `json:"longitude,omitempty"`

	// Name location name
	Name *string `json:"name,omitempty"`
}

// CreateLocationResponse defines model for CreateLocationResponse.
type CreateLocationResponse struct {
	Data *Location `json:"data,omitempty"`

	// Message message of this operation
	Message *string `json:"message,omitempty"`

	// Status status of location creation
	Status *string `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// ErrorCode error code
	ErrorCode *string `json:"errorCode,omitempty"`

	// ErrorMessage error message
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// HttpCode http status error code
	HttpCode *int `json:"httpCode,omitempty"`
}

// Location defines model for Location.
type Location struct {
	// ID ID of location
	ID *int `json:"ID,omitempty"`

	// City location name
	City *string `json:"city,omitempty"`

	// Latitude latitude of the location
	Latitude *float64 `json:"latitude,omitempty"`

	// Longitude longitude of the location
	Longitude *float64 `json:"longitude,omitempty"`

	// Temperature temperatur of the location
	Temperature *float32 `json:"temperature,omitempty"`

	// WeatherSummary weather summary
	WeatherSummary *string `json:"weather_summary,omitempty"`

	// WindAngle angle of wind
	WindAngle *float32 `json:"wind_angle,omitempty"`

	// WindDirection direction of wind
	WindDirection *string `json:"wind_direction,omitempty"`

	// WindSpeed speed of wind in the location
	WindSpeed *float32 `json:"wind_speed,omitempty"`
}

// UpdateLocationWeatherResponse defines model for UpdateLocationWeatherResponse.
type UpdateLocationWeatherResponse struct {
	Data *struct {
		NumUpdated *int `json:"numUpdated,omitempty"`
	} `json:"data,omitempty"`

	// Message message of this operation
	Message *string `json:"message,omitempty"`

	// Status status of location creation
	Status *string `json:"status,omitempty"`
}

// UpdateLocationWeatherJSONBody defines parameters for UpdateLocationWeather.
type UpdateLocationWeatherJSONBody interface{}

// CreateLocationJSONRequestBody defines body for CreateLocation for application/json ContentType.
type CreateLocationJSONRequestBody = CreateLocationRequest

// UpdateLocationWeatherJSONRequestBody defines body for UpdateLocationWeather for application/json ContentType.
type UpdateLocationWeatherJSONRequestBody UpdateLocationWeatherJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new location
	// (POST /locations)
	CreateLocation(c *gin.Context)
	// Update location weathers
	// (POST /locations/weathers)
	UpdateLocationWeather(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateLocation operation middleware
func (siw *ServerInterfaceWrapper) CreateLocation(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLocation(c)
}

// UpdateLocationWeather operation middleware
func (siw *ServerInterfaceWrapper) UpdateLocationWeather(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateLocationWeather(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/locations", wrapper.CreateLocation)
	router.POST(options.BaseURL+"/locations/weathers", wrapper.UpdateLocationWeather)
}
